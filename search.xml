<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>React-Router6</title>
      <link href="/2022/10/19/react-router6/"/>
      <url>/2022/10/19/react-router6/</url>
      
        <content type="html"><![CDATA[<h1 id="React-Router-6-快速上手"><a href="#React-Router-6-快速上手" class="headerlink" title="React Router 6 快速上手"></a>React Router 6 快速上手</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><ol><li><p>React Router 以三个不同的包发布到npm 上，它们分别为:</p><ol><li>react-router：路由的核心库，提供了很多的组件、钩子。</li><li><strong>react-router-dom</strong>：包含react-router所有内容，并添加一些专门用于DOM的组件，例如<code>&lt;BrowserRouter&gt;</code>等。</li><li>react-router-native：包括react-router所有内容，并添加一些专门用于ReactNative的API，例如: <code>&lt;NativeRouter&gt;</code>等。</li></ol></li><li><p>与React Router 5.x版本相比，改变了什么?</p><ol><li><p>内置组件的变化：移除<code>&lt;Switch/&gt;</code>，新增<code>&lt;Routes/&gt;</code>等。</p></li><li><p>语法的变化: <code>component=&#123;About&#125;</code>变为<code>element=&#123;&lt;About/&gt;&#125;</code>等。</p></li><li><p>新增多个hook: useParams、useNavigate 、useMatch等。</p></li><li><p><strong>官方明确推荐函数式组件了！！！</strong></p><p>……</p></li></ol></li></ol><h2 id="2-Component"><a href="#2-Component" class="headerlink" title="2. Component"></a>2. Component</h2><h3 id="1-lt-BrowserRouter-gt"><a href="#1-lt-BrowserRouter-gt" class="headerlink" title="1. &lt;BrowserRouter&gt;"></a>1. <code>&lt;BrowserRouter&gt;</code></h3><ol><li><p>说明：<code>&lt;BroswerRouter</code>用于包裹整个应用</p></li><li><p>实例代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">import ReactDOM from &#x27;react-dom/client&#x27;;</span><br><span class="line">import &#123; BrowserRouter &#125; from &quot;react-router-dom&quot;;</span><br><span class="line">import App from &#x27;./App&#x27;;</span><br><span class="line"></span><br><span class="line">const root = ReactDOM.createRoot(document.getElementById(&#x27;root&#x27;));</span><br><span class="line">root.render(</span><br><span class="line">    &lt;BrowserRouter&gt;</span><br><span class="line">        &lt;App /&gt;</span><br><span class="line">    &lt;/BrowserRouter&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-lt-HashRouter-gt"><a href="#2-lt-HashRouter-gt" class="headerlink" title="2. &lt;HashRouter&gt;"></a>2. <code>&lt;HashRouter&gt;</code></h3><ol><li>说明：作用于<code>&lt;BrowserRouter&gt;</code>一样，但<code>&lt;HashRouter&gt;</code>修改的是地址栏的hash值</li><li>备注：6.x版本中<code>&lt;HashRouter&gt;</code>、<code>&lt;BrowserRouter&gt;</code>的用法与5.x相同</li></ol><h3 id="3-lt-Routes-gt-与-lt-Route-gt"><a href="#3-lt-Routes-gt-与-lt-Route-gt" class="headerlink" title="3. &lt;Routes&gt;与&lt;Route&gt;"></a>3. <code>&lt;Routes&gt;</code>与<code>&lt;Route&gt;</code></h3><ol><li><p>v6版本中移出了先前的<Switch>，引入了新的替代者：<Routes> </p></li><li><p><Routes>和<Route>要配合使用，且必须要用<Routes>包裹<Route>.</p></li><li><p><Route>相当于一个if语句，如果其路径与当前URL匹配，则呈现其对应的组件。</p></li><li><p><Route caseSensitive>属性用于指定：匹配时是否区分大小写（(默认为false)。</p></li><li><p>当URL发生变化时，<Routes>都会查看其所有子<Route>元素以找到最佳匹配并呈现组件。</p></li><li><p><Route>也可以嵌套使用，且可配合useRoutes()配置“路由表”，但需要通过<outlet>组件来渲染其子路由。</p></li><li><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;Routes&gt;</span><br><span class="line">/*path属性用于定义路径，element属性用于定义当前路径所对应的组件*/</span><br><span class="line">    &lt;Route path=&quot;/login&quot; element=&#123;&lt;Login /&gt;&#125;&gt;&lt;/Route&gt;</span><br><span class="line">/*用于定义嵌套路由，home是一级路由，对应的路径/home* /</span><br><span class="line">    &lt;Route path=&quot;/home&quot; element=&#123;&lt;Home /&gt;&#125;&gt;</span><br><span class="line">/*test1 和 test2是二级路由,对应的路径是/home/test1或/home/test2* /</span><br><span class="line">        &lt;Route path=&quot;test1&quot; element=&#123;&lt;Test1 /&gt;&#125;&gt;&lt;/Route&gt;</span><br><span class="line">        &lt;Route path=&quot;test2&quot; element=&#123;&lt;Test2 /&gt;&#125;&gt;&lt;/Route&gt;&lt;/ Route&gt;</span><br><span class="line">    &lt;/Route&gt;</span><br><span class="line">&lt;/Routes&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-lt-Link-gt"><a href="#4-lt-Link-gt" class="headerlink" title="4. &lt;Link&gt;"></a>4. <code>&lt;Link&gt;</code></h3><ol><li><p>作用：修改URL，且不发送网络请求(路由链接)。</p></li><li><p>注意：外侧需要用<BrowserRouter>或<HashRouter>包裹。</p></li><li><p>实例代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Link &#125; from &quot;react-router-don&quot;;</span><br><span class="line">function Test() &#123;</span><br><span class="line">return (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;Link to=&quot;/路径&quot;&gt;按钮&lt;/Link&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="5-lt-NavLink-gt"><a href="#5-lt-NavLink-gt" class="headerlink" title="5. &lt;NavLink&gt;"></a>5. <code>&lt;NavLink&gt;</code></h3><ol><li><p>作用：与<code>&lt;Link&gt;</code>组件类似，且可实现导航的”高亮”效果</p></li><li><p>示例代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//注意:NavLink默认类名是active.下面是指定自定义的class</span><br><span class="line">//自定义样式</span><br><span class="line">&lt;NavLink</span><br><span class="line">to=&quot;login”</span><br><span class="line">className=&#123;(&#123; isActive &#125;) =&gt; &#123;</span><br><span class="line">console.log( &#x27; home &#x27; , isActive)</span><br><span class="line">return isActive ? &#x27;base one&#x27; : &#x27;base &#x27;&#125;</span><br><span class="line">&gt; </span><br><span class="line">   login</span><br><span class="line">&lt;/NavLink&gt;</span><br><span class="line">/*</span><br><span class="line">默认情况下，当Home的子组件匹配成功，Home的导航也会高亮，</span><br><span class="line">当NavLink上添加了end属性后，若Home的子组件匹配成功，则Home的导航没有高亮效果。</span><br><span class="line">* /</span><br><span class="line">        </span><br><span class="line">&lt;NavLink to=&quot;home&quot; end &gt;</span><br><span class="line">    home</span><br><span class="line">&lt;/NavLink&gt;</span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="6-lt-Navigate-gt"><a href="#6-lt-Navigate-gt" class="headerlink" title="6. &lt;Navigate&gt;"></a>6. <code>&lt;Navigate&gt;</code></h3><ol><li><p>作用：只要<Navigate>组件被渲染，就会修改路径，切换视图。</p></li><li><p>replace属性用于控制跳转模式(push 或 replace，默认是push).</p></li><li><p>示例代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import React,&#123;usestate&#125; from &#x27;react&#x27;</span><br><span class="line">import &#123;Navigate&#125; from &#x27;react-router-dom&quot;</span><br><span class="line">export default function Home()&#123;</span><br><span class="line">const [sum, setsum] = usestate(1)</span><br><span class="line">return (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;h3&gt;我是Home的内容&lt;/h3&gt;</span><br><span class="line">&#123;/*根据sum的值决定是否切换视图*/&#125;</span><br><span class="line">&#123;</span><br><span class="line">    sum === 1 ? &lt;h4&gt;sum的值为&#123;sum&#125;&lt;/h4&gt; : &lt;Navigate to=&quot;/about&quot; replace=ftrue&#125;/&gt;</span><br><span class="line">&#125;</span><br><span class="line">      &lt;button onclick=&#123;()=&gt;setSum(2)&#125;&gt;点我将sum变2&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="7-lt-Outlet-gt"><a href="#7-lt-Outlet-gt" class="headerlink" title="7. &lt;Outlet&gt;"></a>7. <code>&lt;Outlet&gt;</code></h3><ol><li><p>当<code>&lt;Route&gt;</code>产生嵌套是，渲染其对应的后续子路由</p></li><li><p>示例代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据路由表生成对应的路由规则</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="title function_">useRoutes</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">About</span> /&gt;</span></span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Home</span> /&gt;</span></span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;news&quot;</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">News</span> /&gt;</span></span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;message&quot;</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Message</span> /&gt;</span></span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">  &#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">// Home.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NavLink</span>,<span class="title class_">Outlet</span>,useOutlet &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;useOutlet:&#x27;</span>,<span class="title function_">useOutlet</span>())</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              message</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;news&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              news</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 指定路由组件呈现的位置 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-Hooks"><a href="#3-Hooks" class="headerlink" title="3. Hooks"></a>3. Hooks</h2><h3 id="1-useRoutes"><a href="#1-useRoutes" class="headerlink" title="1. useRoutes()"></a>1. useRoutes()</h3><ol><li><p>作用：根据路由表，动态创建<code>&lt;Routes&gt;</code>和<code>&lt;Route&gt;</code></p></li><li><p>实例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">// 路由表配置：src/routes/index.js</span><br><span class="line">import &#123; Navigate &#125; from &quot;react-router-dom&quot;;</span><br><span class="line"></span><br><span class="line">import About from &#x27;../pages/About&#x27;</span><br><span class="line">import Home from &#x27;../pages/Home&#x27;</span><br><span class="line">export default [</span><br><span class="line">    &#123;</span><br><span class="line">      path:&#x27;/about&#x27;,</span><br><span class="line">      element:&lt;About/&gt;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path:&#x27;/home&#x27;,</span><br><span class="line">      element:&lt;Home/&gt;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path:&#x27;/&#x27;,</span><br><span class="line">      element:&lt;Navigate to=&quot;/about&quot;/&gt;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">// App.jsx</span><br><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import &#123; NavLink, useRoutes &#125; from &quot;react-router-dom&quot;;</span><br><span class="line">import routes from &#x27;./routes&#x27;</span><br><span class="line"></span><br><span class="line">export default function App() &#123;</span><br><span class="line">  // 创建路由表</span><br><span class="line">  const element = useRoutes(routes)</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">            &#123;/* 原生html中，靠&lt;a&gt;跳转不同的页面 */&#125;</span><br><span class="line">            &#123;/* &lt;a className=&quot;list-group-item&quot; href=&quot;./about.html&quot;&gt;About&lt;/a&gt;</span><br><span class="line">          &lt;a className=&quot;list-group-item active&quot; href=&quot;./home.html&quot;&gt;Home&lt;/a&gt; */&#125;</span><br><span class="line"></span><br><span class="line">            &#123;/* 在React中靠路由链接实现切换组件--编写路由链接(导航区) */&#125;</span><br><span class="line">            &lt;NavLink className=&quot;list-group-item&quot; to=&quot;/about&quot;&gt;</span><br><span class="line">              About</span><br><span class="line">            &lt;/NavLink&gt;</span><br><span class="line">            &lt;NavLink className=&quot;list-group-item&quot; to=&quot;/home&quot;&gt;</span><br><span class="line">              Home</span><br><span class="line">            &lt;/NavLink&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            &#123;/* 注册路由(展示区) */&#125;</span><br><span class="line">            &#123;/* 使用路由表 */&#125;</span><br><span class="line">            &#123;</span><br><span class="line">              element</span><br><span class="line">            &#125;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-useNavigate"><a href="#2-useNavigate" class="headerlink" title="2. useNavigate()"></a>2. useNavigate()</h3><ol><li><p>作用：返回一个函数来实现编程式导航</p></li><li><p>实例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import React from &#x27;react&#x27;</span><br><span class="line">import &#123;useNavigate&#125; from &#x27;react-router-dom&#x27;</span><br><span class="line">export default function Demo() &#123;</span><br><span class="line">const navigate = useNavigate()</span><br><span class="line">const handle = () =&gt; &#123;</span><br><span class="line">//第一种使用方式:指定具体的路径</span><br><span class="line">        navigate(&quot;/login&quot;,&#123;</span><br><span class="line">replace: false,</span><br><span class="line">             state: ia:1， b:2</span><br><span class="line">        &#125;</span><br><span class="line">             </span><br><span class="line">    &#125;</span><br><span class="line">//第二种使用方式:传入数值进行前进或后退，类似于5.x中的 history.go()方法</span><br><span class="line">         navigate(-1)</span><br><span class="line">return (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;button onClick=&#123;handle&#125;&gt;按钮&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-useParams"><a href="#3-useParams" class="headerlink" title="3. useParams()"></a>3. useParams()</h3><ol><li><p>作用：返回当前匹配路由的<code>params</code>参数，类似5.x中的<code>match.params</code></p></li><li><p>实例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import React from &quot;react &#x27;;</span><br><span class="line">import &#123; Routes,Route,useParams &#125; from &quot;react-router-dom&quot;;</span><br><span class="line">import User from &quot;./pages/User.jsx&#x27;;</span><br><span class="line">function ProfilePage() &#123;</span><br><span class="line">//获取URL中携带过来的params参数</span><br><span class="line">let &#123; id &#125;= useParams();</span><br><span class="line">&#125;</span><br><span class="line">function App() &#123;</span><br><span class="line">return (</span><br><span class="line">&lt;Routes&gt;</span><br><span class="line">&lt;Route path=&quot;users/:id&quot; element=&#123;&lt;User /&gt;&#125;/&gt;</span><br><span class="line">&lt;/Routes&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-useSearchParams"><a href="#4-useSearchParams" class="headerlink" title="4. useSearchParams()"></a>4. useSearchParams()</h3><ol><li><p>作用：用于读取和修改当前位置的URL中的查询字符串。</p></li><li><p>返回一个包含两个值的数组，内容分别为：当前的seaech参数、更新search的函数。</p></li><li><p>实例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import React from &#x27;react&#x27;</span><br><span class="line">import &#123; useSearchParams,useLocation &#125; from &quot;react-router-dom&quot;;</span><br><span class="line"></span><br><span class="line">export default function Details() &#123;</span><br><span class="line">  // 2. 接收参数</span><br><span class="line">  const [search, setSearch] = useSearchParams()</span><br><span class="line">  const id = search.get(&#x27;id&#x27;)</span><br><span class="line">  const title = search.get(&#x27;title&#x27;)</span><br><span class="line">  const content = search.get(&#x27;content&#x27;)</span><br><span class="line"></span><br><span class="line">  const x = useLocation()</span><br><span class="line">  console.log(x)</span><br><span class="line">  return (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;button onClick=&#123;()=&gt;setSearch(&#x27;id=008&amp;title=哈哈&amp;content=嘻嘻&#x27;)&#125;&gt;点我更新一下收到的参数&lt;/button&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;消息编号：&#123;id&#125;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;消息标题：&#123;title&#125;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;消息内容：&#123;content&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="5-useLocation"><a href="#5-useLocation" class="headerlink" title="5. useLocation()"></a>5. useLocation()</h3><ol><li><p>作用：获取当前location信息，对标5.x中的路由组件的location属性</p></li><li><p>实例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import React from &#x27;react&#x27;</span><br><span class="line">import &#123; useLocation &#125; from &quot;react-router-dom&quot;;</span><br><span class="line"></span><br><span class="line">export default function Details() &#123;</span><br><span class="line">  // 2. 接收参数</span><br><span class="line">  const &#123;state&#125; = useLocation()</span><br><span class="line">  console.log(state)</span><br><span class="line">    // location对象</span><br><span class="line">    /*</span><br><span class="line">    &#123;</span><br><span class="line">    hash: &quot;&quot;,</span><br><span class="line">    key: &quot;ah9nv6sz&quot;,</span><br><span class="line">    pathname: &quot;/login&quot;,</span><br><span class="line">    search: &quot;?name=zs&amp;age=18&quot;,</span><br><span class="line">    state: &#123;a: 1,b: 2&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    */</span><br><span class="line">  return (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;消息编号：&#123;state.id&#125;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;消息标题：&#123;state.title&#125;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;消息内容：&#123;state.content&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="6-useMatch"><a href="#6-useMatch" class="headerlink" title="6. useMatch()"></a>6. useMatch()</h3><ol><li><p>作用：返回当前匹配信息，对标5.x中的路由组件的<code>match</code>属性</p></li><li><p>实例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=&quot;/login/:page/:pagesize&quot; element=&#123;&lt;Login /&gt;&#125;/&gt;&lt;NavLink to=&quot;/login/1/10&quot;&gt;登录&lt;/NavLink&gt;</span><br><span class="line">export default function Login() &#123;</span><br><span class="line">const match = useMatch(&#x27;/login/:x/:y&#x27;)</span><br><span class="line">console.log(match)//输出match对象</span><br><span class="line">// match对象内容如下:</span><br><span class="line">/*</span><br><span class="line">&#123;</span><br><span class="line">params: &#123;x: &quot;1&#x27;, y: &quot;10&#x27;&#125;</span><br><span class="line">pathname: &quot;/LoGin/1/10&quot;</span><br><span class="line">pathnameBase: &quot;/LoGin/1/1e&quot;</span><br><span class="line">pattern: &#123;</span><br><span class="line">path: &#x27;/ login/:x/:y&#x27;,</span><br><span class="line">casesensitive:false,</span><br><span class="line">end: false</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line">return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">&lt;h1&gt;Login&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="7-useInRouterContext"><a href="#7-useInRouterContext" class="headerlink" title="7. useInRouterContext()"></a>7. useInRouterContext()</h3><p>作用：如果组件在<code>&lt;Router&gt;</code>的上下文中呈现，则<code>useInRouterContext</code>钩子返回true，否则返回false</p><h3 id="8-useNavigationType"><a href="#8-useNavigationType" class="headerlink" title="8. useNavigationType()"></a>8. useNavigationType()</h3><ol><li>作用：返回当亲的导航类型（用户是如何来到当前页面的）</li><li>返回值：<code>POP</code>、<code>PUSH</code>、<code>REPLACE</code></li><li>备注：<code>POP</code>是指在浏览器中 直接打开 了这个路由组件（刷新页面）</li></ol><h3 id="9-useOutlet"><a href="#9-useOutlet" class="headerlink" title="9. useOutlet()"></a>9. useOutlet()</h3><ol><li><p>作用：用来呈现当前组件中要渲染的嵌套路由</p></li><li><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const result = useOutlet()</span><br><span class="line">console.log(result)</span><br><span class="line">// 如果嵌套路由没有挂载，则result为null</span><br><span class="line">// 如果嵌套路由已经挂载，则展示嵌套的路由对象</span><br></pre></td></tr></table></figure></li></ol><h3 id="10-useResolvedPath"><a href="#10-useResolvedPath" class="headerlink" title="10. useResolvedPath()"></a>10. useResolvedPath()</h3><ol><li>作用：给定一个URL值，解析其中的：path、search、hash值</li></ol>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端基础</title>
      <link href="/2022/10/16/qian-duan-ji-chu/"/>
      <url>/2022/10/16/qian-duan-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="知识体系"><a href="#知识体系" class="headerlink" title="知识体系"></a>知识体系</h1><h2 id="什么是web前端？"><a href="#什么是web前端？" class="headerlink" title="什么是web前端？"></a>什么是web前端？</h2><p>​浅显的理解:前端就是网站的前台部分,无论是在PC端还是移动端，通过浏览器以页面的形式展示在用户的面前的一些可视化和交互的部分都是前端的工作范畴</p><h3 id="前端知识小科普"><a href="#前端知识小科普" class="headerlink" title="前端知识小科普"></a>前端知识小科普</h3><ol><li><p>什么是网页&#x2F;网站</p><p>​网站(Website)是指在因特网上根据一定的规则，使用HTML(标准通用标记语言）等工具制作的用于展示特定内容相关网页的集合。简单地说，网站是一种沟通工具，人们可以通过网站来发布自己想要公开的资讯，或者利用网站来提供相关的网络服务..”</p></li><li><p>常见的浏览器内核</p><p>浏览器的内核：负责渲染页面</p><p>浏览器内核备注</p><p>IETridentie、猎豹…</p><p>firefox  Gecko火狐浏览器</p><p>safari    Webkit   苹果浏览器</p><p>Chrome&#x2F;Opera Blink  Chrome&#x2F;Opara浏览器内核Blink是webkit的再次开发</p></li><li><p>万维网联盟(w3c)</p></li></ol><h2 id="web标准的构成"><a href="#web标准的构成" class="headerlink" title="web标准的构成"></a>web标准的构成</h2><ul><li>结构–HTML</li><li>表现–CSS</li><li>行为–javaScript</li></ul><h3 id="html基础知识学习"><a href="#html基础知识学习" class="headerlink" title="html基础知识学习"></a>html基础知识学习</h3><ol><li><p>什么是html?</p><p>​HTML是一一个超文本标记诺言，它是一种规范，-种标准，它通过标记符号来标记要显示网页中的各个部分，正因为有规则，浏览器才知道怎样去解读你的文件但需要注意的是，对于不同的浏览器，对同一标记符可能会有差异，因而可能会出现不同的显示效果，所以会出现兼容问题,莫急，咱们后面的课程会专门对此进行讲解。</p></li><li><p>语言？</p><p>​什么是标记语言?通俗的说，我们的汉字，当我们给别人说衣服这个词汇的时候，别人<br>马上知道我们指的的物品是什么，就是把这个汉字相当于某种物品的标记。同理，我们前端<br>写好的页面，在浏览器上进行渲染的时候，也有一-套规范。例如，当我们写一个p标签的时<br>候，浏览器就知道是一个段落。那为啥说是超文本呢?因为它不仅仅是单纯的文本，还可以<br>放图片，音频，视频。</p></li><li><p>html语法规范</p><ol><li>html标签 由尖括号把关键词包裹，比如<p></li><li>基本 上都是成对出现，由开始标签和结柴标签组成,也叫“双标签”，比如:</li></ol><p>段落</p><ol start="3"><li>还有另一类标签比较特殊，是单独出现的，叫“单标签”、“自闭合标签”、“空标签”,<br>比如: <input /></li></ol></li><li><p>标签的关系</p><ul><li>包含关系：html和head，html和body</li><li>并列关系：head和body</li></ul></li><li><p>html基本结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;网页标题&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">可视区域</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="vscode基本操作及代码解读"><a href="#vscode基本操作及代码解读" class="headerlink" title="vscode基本操作及代码解读"></a>vscode基本操作及代码解读</h3><ul><li><p>vscode基本操作：文件的增删改查</p></li><li><p>快速生成第一个html文件</p><ol><li>新建一个文件，html后缀名：.html或者.htm</li><li>在英文输入法状态下按 ! (回车或者tab)</li></ol></li><li><p>html文件代码解读</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br></pre></td></tr></table></figure><p>文档类型声明标签：告诉浏览器用哪种html版本来显示我们的页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br></pre></td></tr></table></figure><p>浏览器并不知道你页面中是什么语言，告诉浏览器，文档显示的语言是什么? en代表的就是英语就是英文网站，zh-CN定义的是中文，就是中文网站</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br></pre></td></tr></table></figure><p>字符编码:可以存储各种各样的文字。常见的有:GB2312(简休中文)、BlG5（繁休中文),GBK(包含繁体和简体，国标码）、UTF-8（万国码，包含了全世界所有国家需要用的的字符)。作用:防止乱码</p></li></ul><h2 id="常用的标签"><a href="#常用的标签" class="headerlink" title="常用的标签"></a>常用的标签</h2><ul><li><p>标题标签：h1-h6</p><p>表现形式上：都是加粗，字号由大到小，对搜索引擎来说，重要程度逐层递减</p></li><li><p>段落标签：p</p></li><li><p>换行标签：br(单标签)</p></li><li><p>大盒子标签：div</p></li><li><p>小盒子标签：span</p></li><li><p>插入图片标签：img</p></li><li><p>超链接：a</p></li><li><p>格式化标签：</p><ol><li>加粗：strong &#x2F; b</li><li>斜体：em &#x2F; i</li><li>删除线：del &#x2F; s</li><li>下划线：ins &#x2F; u</li></ol></li><li><p>预格式化标签：pre</p></li></ul><h3 id="标签属性"><a href="#标签属性" class="headerlink" title="标签属性"></a>标签属性</h3><p>​标签的片性: 属性提供了有关HTML元素的更多的信息，用来描述某个特征和功能的。可以分为内置属性和自定义属性。</p><p>​表现形式: 属性总是以名称&#x2F;值对的形式出现，比如: name&#x3D;”value”。(键值对)</p><p>​注意的细节:</p><ol><li><p>属性总是在HTML元素的开始标签中规定(跟在关键词的后面)</p></li><li><p>以键值对的形式出现</p></li><li><p>元素可以有多个属性，属性和属性之间至少要有一个空格</p></li><li><p>属性是没有先后顺序的</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;1.jpg&quot; title=&quot;啊哈哈哈&quot; alt=&quot;欢迎图片&quot;/&gt;</span><br></pre></td></tr></table></figure><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>​路径可以分为:绝对路径和相对路径</p><p>​绝对路径:绝对路径是指目录下的绝对位置，直接到达目标位置，通常是从盘符开始的路径。完整的描述文件位置的路径就是绝对路径。主要有两种形式:</p><p>​1. fle:&#x2F;&#x2F;&#x2F;C:&#x2F;Uers&#x2F;wangxiajin&#x2F;Desktop&#x2F;前端课程&#x2F;1.html</p><p>​2. <a href="https://www.mi.com/">https://www.mi.com/</a> </p><p>​相对路径: 就是指由这个文件所在的路径引起的跟其它文件(或文件夹路径)的路径关系。(以当前的文件做为参照物，去寻找其它文件的一种路径方式，在项目开发中经常使用)</p><pre><code>    1. 同级目录：直接写文件名字    2. 下一级：/    3. 返回上一级：../，如果要返回多级，就需要写多个../</code></pre><h3 id="a标签详解"><a href="#a标签详解" class="headerlink" title="a标签详解"></a>a标签详解</h3><h4 id="a标签里面常用的属性"><a href="#a标签里面常用的属性" class="headerlink" title="a标签里面常用的属性"></a>a标签里面常用的属性</h4><ul><li>target &#x3D; “_blank”：在新窗口打开</li><li>target &#x3D; “_self”：在当前窗口打开（默认值）</li></ul><h4 id="a标签href里面常用的几个值"><a href="#a标签href里面常用的几个值" class="headerlink" title="a标签href里面常用的几个值"></a>a标签href里面常用的几个值</h4><ul><li><p>具体跳转的网址：href &#x3D; “<a href="http://www.baidu.com&quot;/">http://www.baidu.com&quot;</a></p></li><li><p>刷新：href &#x3D; “ “</p></li><li><p>回到顶部：href &#x3D; “#”</p></li><li><p>禁止跳转：href &#x3D; “禁止跳转”</p></li><li><p>锚点跳转：作用：点击某个a标签的时候，可以跳转到相应的模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id = &quot;goods&quot;&gt;模块一&lt;/div&gt;</span><br><span class="line">&lt;a href = &quot;#goods&quot;&gt;跳转到模块一&lt;/a&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="table表格标签"><a href="#table表格标签" class="headerlink" title="table表格标签"></a>table表格标签</h3><h4 id="table表格的作用"><a href="#table表格的作用" class="headerlink" title="table表格的作用"></a>table表格的作用</h4><p>主要用来展示我们的数据，增强可读性</p><h4 id="table的基本语法"><a href="#table的基本语法" class="headerlink" title="table的基本语法"></a>table的基本语法</h4><p>标签具体含义</p><p>table表格标签</p><p>tr  代表每一行</p><p>td  代表每一个单元格</p><p>th  表头标题</p><p>caption  表格标题</p><h4 id="table的结构"><a href="#table的结构" class="headerlink" title="table的结构"></a>table的结构</h4><p>thead、tbody、tfoot</p><h4 id="table相关的属性"><a href="#table相关的属性" class="headerlink" title="table相关的属性"></a>table相关的属性</h4><p>align对齐方式：left，center，right</p><p>width宽度</p><p>height   高度</p><p>cellpadding  内容单元格边框的距离</p><p>cellspacing       单元格到单元格的距离</p><p>calspan             跨列</p><p>rowspan        跨行</p><h3 id="三大列表标签"><a href="#三大列表标签" class="headerlink" title="三大列表标签"></a>三大列表标签</h3><h4 id="列表的作用"><a href="#列表的作用" class="headerlink" title="列表的作用"></a>列表的作用</h4><p>列表：列表主要是用来布局的，除了这个之外，只要是代表咱们列表的版块都可以用</p><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">&lt;li&gt;吃饭&lt;/li&gt;</span><br><span class="line">&lt;li&gt;睡觉&lt;/li&gt;</span><br><span class="line">&lt;li&gt;打豆豆&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;吃饭&lt;/li&gt;</span><br><span class="line">&lt;li&gt;睡觉&lt;/li&gt;</span><br><span class="line">&lt;li&gt;打豆豆&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h3 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h3><p>表单的作用：收集用户信息，便于以后的管理</p><p>表单的组成：表单域（form）、表单元素、提示信息</p><h4 id="表单域元素"><a href="#表单域元素" class="headerlink" title="表单域元素"></a>表单域元素</h4><p>表单域：form</p><p>表单域的作用：包含表单的区域，在提交表单信息的时候，可以把这个区域中的信息提交给后台</p><p>表单与form常见的属性</p><p>属性属性值含义</p><p>action  url提交信息的地址</p><p>methodpost &#x2F; get提交信息的方法</p><p>name   名称用于区分一个页面中多个表单域</p><h4 id="表单元素-1"><a href="#表单元素-1" class="headerlink" title="表单元素"></a>表单元素</h4><p>常见表单元素</p><ul><li>input：类型的表单元素</li><li>button：按钮</li><li>select：下拉框表单元素</li><li>textarea：文本域</li></ul><h4 id="input类常用的表单类型"><a href="#input类常用的表单类型" class="headerlink" title="input类常用的表单类型"></a>input类常用的表单类型</h4><p>![img](file:&#x2F;&#x2F;&#x2F;C:\Users\zjw19\Documents\Tencent Files\2506641977\Image\C2C{&#96;2I&#96;&#96;Q4ONCAG8P0DZDBQGL.png)</p><h4 id="input常用的属性"><a href="#input常用的属性" class="headerlink" title="input常用的属性"></a>input常用的属性</h4><p>![img](file:&#x2F;&#x2F;&#x2F;C:\Users\zjw19\Documents\Tencent Files\2506641977\Image\C2C]&#96;5GE8<del>M3DT[8U%]MMCB}</del>Y.png)</p><h5 id="单选功能的实现"><a href="#单选功能的实现" class="headerlink" title="单选功能的实现"></a>单选功能的实现</h5><p>单选按钮功能实现</p><p>对于同一组的单选按钮，我们需要给它们起一个相同的name值，这样浏览器就知道它们是一组了，就可以实现单选功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请选择您的性别：&lt;br/&gt;</span><br><span class="line">女 &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;女&quot;&gt;</span><br><span class="line">男 &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;男&quot;&gt;</span><br></pre></td></tr></table></figure><h5 id="文字关联功能的实现"><a href="#文字关联功能的实现" class="headerlink" title="文字关联功能的实现"></a>文字关联功能的实现</h5><p>为了增加用户的体验，我们会实现文字关联功能，点击文字的时候，就可以实现选中的input，这个需要用到咱们的label标签。</p><p><span style="color:red">label功能：当点击文字的时候，可以让和它关联的表单元素被选中</span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;index.html&quot; method=&quot;GET&quot; name=&quot;getSex&quot;&gt;</span><br><span class="line">请选择您的性别：&lt;br/&gt;</span><br><span class="line">&lt;label for=&quot;wonman&quot;&gt;女&lt;/label&gt; &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;女&quot; id=&quot;wonman&quot;&gt;</span><br><span class="line">&lt;label for=&quot;man&quot;&gt;男&lt;/label&gt; &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;男&quot; id=&quot;wonman&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h4 id="下拉框和文本域"><a href="#下拉框和文本域" class="headerlink" title="下拉框和文本域"></a>下拉框和文本域</h4><h5 id="select-下拉框"><a href="#select-下拉框" class="headerlink" title="select 下拉框"></a>select 下拉框</h5><p>select 下拉框及常用的属性</p><ul><li>selected 默认被选中</li><li>disabled 禁止选中</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select&gt;</span><br><span class="line">&lt;option value=&quot;北京&quot; disabled&gt;北京&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;上海&quot; checked&gt;上海&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;河南&quot;&gt;河南&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h5 id="textarea-文本域"><a href="#textarea-文本域" class="headerlink" title="textarea 文本域"></a>textarea 文本域</h5><p>文本域：textarea，一般用在评论框或者留言</p><ul><li>col：一行显示的文字</li><li>rows：规定多少行</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea cols=&quot;30&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt;</span><br></pre></td></tr></table></figure><h3 id="字符实体"><a href="#字符实体" class="headerlink" title="字符实体"></a>字符实体</h3><ol><li>在HTML中不能使用小于号（&lt;)和大于号(&gt;)，这是因为浏览器会误认为它们是标签。</li><li>如果希望正确地显示预留字符，我们必须在HTML源代码中使用字符实体(character entities)</li><li>字符实体用的不是很多，所以大家不用刻意去记忆，需要的时候直接查文档即可</li><li>链接: https: &#x2F; &#x2F; <a href="http://www.w3school.com.cn/">www.w3school.com.cn/</a></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;你是你&amp;nbsp;&amp;nbsp;我是我&lt;/p&gt;</span><br></pre></td></tr></table></figure><h2 id="css-篇章"><a href="#css-篇章" class="headerlink" title="css 篇章"></a>css 篇章</h2><h4 id="css简介"><a href="#css简介" class="headerlink" title="css简介"></a>css简介</h4><p>​css是Cascading Style Sheets的简称，我们把它称为“层叠样式表”主要用来美化页面的，可以给网页设置字体大小、颜色、布局等，让网页更加的漂亮。</p><h4 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h4><p>选择器和多条语句组成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p&#123;color:yellow;width:100px;height:100px&#125;</span><br></pre></td></tr></table></figure><ul><li>选择器：具体的元素（选中谁）</li><li>{}：花括号里面存放选中元素的样式（要给这个元素化哪些妆容）</li><li>具体的样式，包含属性名和属性值，它们中间用”:”进行连接</li><li>声明语句和语句之间我们需要用”;”进行分割（一定是英文状态下的）</li></ul><h3 id="字体相关样式"><a href="#字体相关样式" class="headerlink" title="字体相关样式"></a>字体相关样式</h3><p>定义字体的样式：文字字体，文字大小，文字粗细，文字样式</p><ul><li>文字字体：font-family</li></ul><p><span style="color:red">注意</span></p><ol><li>对多个单词组成的字体，我们需要用双引号包裹起来</li><li>如果有多种字体的话，我们需要用英文的逗号进行分割</li><li>顺序关系</li></ol><ul><li>文字大小：font-size</li><li>文字粗细：font-weight</li><li>文字样式：font-style</li></ul><h4 id="字体的复合属性："><a href="#字体的复合属性：" class="headerlink" title="字体的复合属性："></a>字体的复合属性：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">font:font-style font-weiht font-size/line-height font-family;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span style="color:red">注意</span></p><ol><li>用font复合属性的时候，必须按照上面的顺序，并且属性之间要有空格隔开</li><li>font-size和font-family这两个属性不能省略</li></ol><h3 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h3><p>css的文本属性：主要是定义文本的外观，它包含文本颜色，文本对齐，文本缩进，文本装饰线，行高</p><p>属性作用</p><p>color文本设置颜色：英文颜色单词，16进制，rgb</p><p>text-align 文本水平对齐方式：left，center，right</p><p>text-indent   文本缩进（缩进两个字的距离2em）</p><p>text-decoration            文本装饰线</p><p>line-height行高，控制行与行之间的距离</p><h3 id="块级元素水平居中"><a href="#块级元素水平居中" class="headerlink" title="块级元素水平居中"></a>块级元素水平居中</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">width:10px;</span><br><span class="line">height:100px;</span><br><span class="line">border:5px double green;</span><br><span class="line">margin:0 auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="清除默认样式"><a href="#清除默认样式" class="headerlink" title="清除默认样式"></a>清除默认样式</h3><p>清除默认的margin和padding</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">margin:0;</span><br><span class="line">padding:0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>清除列表前面的默认样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ul,ol&#123;</span><br><span class="line">list-style:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="css引入的几种方式"><a href="#css引入的几种方式" class="headerlink" title="css引入的几种方式"></a>css引入的几种方式</h3><ol><li><p>行内样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&quot;width:100px&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>优点：书写方便，权重高</p><p>缺点：没有做到结构样式相分离</p></li><li><p>内嵌样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">div&#123;</span><br><span class="line">color:red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>优点：结构样式相分离</p><p>缺点：分离不彻底</p></li><li><p>外链</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;index.css&quot;&gt;</span><br></pre></td></tr></table></figure><p>优点：完全结构和样式相分离</p></li><li><p>导入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">@import url(&#x27;index.css&#x27;)</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>在实际项目开发中，我们不用</p></li></ol><h4 id="link和import区别"><a href="#link和import区别" class="headerlink" title="link和import区别"></a>link和import区别</h4><ol><li>link除了可以加载CSS外，还可以定义RSS,定义rel连接属性等其他作用;@import只能加载CSS。</li><li>加载顺序: link引用的CSS会在页面被加载的时候同时加载;@import 引用的CSS会等到页面全部被下载完再被加载。</li><li>兼容性的差别。@import 是CSS2.1提出的，老的浏览器不支持，IE5以上的才能识别（不过现在来说，已经不是问题了，应该很少有使用IE5及以下的浏览器了)。link浏览器都支持。</li><li>使用javascript可以控制到link,但@import却无法控制。</li></ol><h3 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h3><h4 id="什么是选择器？"><a href="#什么是选择器？" class="headerlink" title="什么是选择器？"></a>什么是选择器？</h4><p>主要用来选取元素的一些方式。比如：给某个人化妆的时候，咱们得叫他一下，知道是哪个人化妆。</p><p>选择器可以分为基础选择器和复合选择器。</p><h5 id="通配选择器"><a href="#通配选择器" class="headerlink" title="通配选择器"></a>通配选择器</h5><p>权重：0</p><p>符号：*</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">margin: 0;</span><br><span class="line">padding: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h5><p>权重：1</p><p>选择器：标签名</p><p>作用：会对这一类都起作用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h5><p>权重：10</p><p>作用：把具有特定类名的元素都选中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h5><p>权重：100</p><p>作用：把具有这个id名字的元素选中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#box &#123;</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h5><p>常用的复合选择器</p><p>子选择器&gt;</p><p>后代选择器：空格</p><p>相邻兄弟选择器：+</p><p>通用兄弟选择器：~</p><p>并集选择器：，</p><p>交集选择器：没有符号，紧紧相邻</p><h5 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h5><p>​伪类选择器(简称:伪类)通过冒号来定义，它定义了元素的状态，如点击按下，点击完成等，通过伪类可以为元素的状态修改样式。伪类选择器比较多，这里咱们介绍下链接伪类选择器和focus伪类选择器。</p><h6 id="链接伪类选择器"><a href="#链接伪类选择器" class="headerlink" title="链接伪类选择器"></a>链接伪类选择器</h6><ul><li><p>link 默认链接的颜色</p></li><li><p>visited 访间过后的颜色</p></li><li><p>hover 鼠标滑上的颜色</p></li><li><p>active 鼠标点击上的面色</p><p>注意：需要按照一定的顺序，这个顺序在网络上被称为”爱恨原则”，( love hate)</p></li></ul><h6 id="focus伪类选择器"><a href="#focus伪类选择器" class="headerlink" title="focus伪类选择器"></a>focus伪类选择器</h6><p>focus伪类选择器：用于选取获取焦点的表单元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input:focus&#123;</span><br><span class="line">background: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="css三大特性"><a href="#css三大特性" class="headerlink" title="css三大特性"></a>css三大特性</h3><p>css三大特性：继承性，层叠性，优先级</p><h4 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h4><p>​官方解析，继承是一种规则、它允许样式不仪应用于特定的html标签元素，而且应用于其后代元素。简单说就是给父元素设置一些属性，子元素 &#x2F; 后代也可以使用，这个我们称之为继承性。</p><h4 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h4><p>层叠性就是css处理冲突的一种能力。通俗的说就是多种选择器选中了同一个元素，又对相同的属性设置了不同的属性值，这个时候就会发生层叠性。</p><ol><li>如果权重相同的话，就看css代码的顺序，后面的会把前面恶属性覆盖</li><li>如果权重不相同的话，谁权重大就听谁的</li></ol><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><p>!important(无穷大) &gt; 行内样式(1000) &gt; id(100) &gt; 类(10) &gt; 标签(1) &gt; 通配符，继承(0)</p><p>注意：如果该元素没有直接选中，而是通过继承得到的属性设置，那么不管它的父级权重有多高，该元素的权重都是0</p><h2 id="标签分类"><a href="#标签分类" class="headerlink" title="标签分类"></a>标签分类</h2><h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3><ul><li>独占一行</li><li>可以设置宽，高，内边距，外边距</li><li>如果不设置高度，可以继承父级的宽度</li><li>是一个容器或者盒子，里面可以放行内或者块级元素</li></ul><p>常见的块级元素：div，p，h1~h6，ul，ol，li等</p><p>注意：文字类的元素内不能使用块级元素。<br>p标签主要用来存放文字，因此p里而不能放块级元素h1-h6也是文字类的块级标签，里面也不能放块级元素</p><h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><p>注意：行内块也是行内元素的一种</p><ul><li>相邻的行内元素可以在一行上</li><li>设置宽，高无效，盒子的大小就是自身的内容大小</li><li>只能放文字或者其它的行内元素</li></ul><p>常见的行内元素：a，span，b，strong，em等格式化标签</p><p>注意：a标签里面不能再放a标签</p><h3 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h3><p>行内块是特殊的行内元素</p><ul><li>可以和其它的行内(行内块)元素共占一行，但是中间会出现缝隙</li><li>可以设置宽，高</li><li>盒子默认的大小就是本身内容的大小</li></ul><p>常见的块级元素：img，input，table，video等</p><h2 id="标签的相互转换"><a href="#标签的相互转换" class="headerlink" title="标签的相互转换"></a>标签的相互转换</h2><ul><li>转换为块级 display:block;</li><li>转换为行内 display:inline;</li><li>转换为行内块 display:inline-block;</li></ul><p>display还有一个值：none，让元素隐藏</p><h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><p>​盒模型是一种写网页的思维模式，每一个元素都可以看成一个盒子。为了方便记忆，我们可以把它想象成手机盒子。手机就是content部分，白色填充物就是padding部分，手机盒子的边框就是border,多个手机盒子之间距离就是margin。</p><p>写页面最重要的知识：盒模型，浮动，定位</p><h3 id="盒模型主要包括几部分"><a href="#盒模型主要包括几部分" class="headerlink" title="盒模型主要包括几部分"></a>盒模型主要包括几部分</h3><ul><li>content：主要内容区域</li><li>padding：元素盒子与内容直接的内填充</li><li>border：元素盒子的边框</li><li>margin：元素与元素之间的距离</li></ul><p>注意：对于行内元素，不要用padding-top，padding-bottom，margin-top，margin-bottom</p><h3 id="计算盒子的总大小"><a href="#计算盒子的总大小" class="headerlink" title="计算盒子的总大小"></a>计算盒子的总大小</h3><p>总盒子的宽度 &#x3D; content的width + 左右padding + 左右border</p><p>总盒子的高度 &#x3D; content的height + 上下padding + 上下border</p><h3 id="盒模型的两种分类"><a href="#盒模型的两种分类" class="headerlink" title="盒模型的两种分类"></a>盒模型的两种分类</h3><ul><li>标准盒模型：box-sizing：content-box；(默认)</li><li>IE盒模型：box-sizing：border-box；</li></ul><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ol><li>标准盒模型中，代码里面所写的width和height指的是盒模型中content部分的宽和高</li><li>ie盒模型中，代码里面所写的width和height指的是总盒子的宽和高（在实战项目中经常用这个）</li></ol><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h3><h4 id="外边距塌陷（穿透）"><a href="#外边距塌陷（穿透）" class="headerlink" title="外边距塌陷（穿透）"></a>外边距塌陷（穿透）</h4><p>描述：</p><p>​有一个大盒子里面包含小盒子，如果大盒子没有设置padding-top或者是border-top，直接给小盒子设置margin-top，大盒子会跟着小盒子一起向下移动，这个现象就是margin值穿透问题。</p><p>解决办法:</p><ul><li>给大盒子加border-top:1px solid transparent ;</li><li>给大盒子增加overflow:hidden;</li><li>既然margin-top有这样的问题，我们可以给大盒子增加padding-top，来规避这个问题。</li><li>还有浮动、固定定位、绝对定位、行内块等也都可以解决这个问题</li></ul><h4 id="外边距合并-1"><a href="#外边距合并-1" class="headerlink" title="外边距合并"></a>外边距合并</h4><p>描述：</p><p>​有两个兄弟元素: box1，box2垂直排列，我给box1设置margin-bottom:30px;再给box2设置margin-top:100px;这两个元素之间的距离并不是两者之和，而是取最大的那个值。就是margin值穿透问题。</p><p>解决办法：</p><p>​对于同一侧的盒子距离，我们只给某个元素设置即可</p><h3 id="两个块级元素转换成行内块存在的问题"><a href="#两个块级元素转换成行内块存在的问题" class="headerlink" title="两个块级元素转换成行内块存在的问题"></a>两个块级元素转换成行内块存在的问题</h3><p>解决的办法：</p><ol><li>消除换行符</li><li>给父元素设置font-size：0</li></ol><h3 id="img常见的缝隙问题"><a href="#img常见的缝隙问题" class="headerlink" title="img常见的缝隙问题"></a>img常见的缝隙问题</h3><p>解决的办法：</p><ol><li>把img转换为块级</li><li>给父盒子设置一个固定的高度</li></ol><h3 id="margin和padding值写法规律"><a href="#margin和padding值写法规律" class="headerlink" title="margin和padding值写法规律"></a>margin和padding值写法规律</h3><p>无论是margin还是padding都遵循这样的规律，margin和padding都有四个方向：</p><ul><li>padding-left（padding-left）</li><li>padding-right（padding-right）</li><li>padding-bottom（padding-bottom）</li><li>padding-top（padding-top）</li></ul><p>复合写法：</p><ul><li>padding：10px 20px 30px 40px；（四个值的时候，按照顺时针：上右下左）</li><li>padding:10px 20px 30px；(三个值得时候：上、左右、下)</li><li>padding:10px 20px；(两个值：上下、左右)<br>padding: 10px；(一个值：四个方向都是10px)</li></ul><h2 id="background相关知识"><a href="#background相关知识" class="headerlink" title="background相关知识"></a>background相关知识</h2><p>值       描述<br>background-color      背景颜色<br>background-image        背景图片<br>background-repeat            背景图像平铺的方式<br>background-attachment    规定背景图像是否固定或者随着页面的其余部分滚动。<br>background-position          背景位置<br>background-size                控制背景图片的大小</p><p>background复合写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background: background-color background-image background-repeat background-attachment background-position</span><br></pre></td></tr></table></figure><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><h3 id="浮动的出现"><a href="#浮动的出现" class="headerlink" title="浮动的出现"></a>浮动的出现</h3><ul><li>想让块级元素在一行显示</li><li>有很多的布局效果，普通文档流是无法完成的，实现起来也特别麻烦</li></ul><h3 id="浮动的值"><a href="#浮动的值" class="headerlink" title="浮动的值"></a>浮动的值</h3><p>left  元素左浮动</p><p>right元素右浮动</p><p>none默认值，元素不浮动</p><h3 id="浮动的特点"><a href="#浮动的特点" class="headerlink" title="浮动的特点"></a>浮动的特点</h3><ol><li>脱离了普通文档流</li><li>浮动的元素具备行内块的特性<ul><li>可以左右排列</li><li>即使是行内元素，浮动浮动之后写大写也可以起作用</li><li>即使是块级元素，如果不写宽度，不在默认占满父盒子，而是自身内容的决定</li><li>浮动的元素碰到普通文档流的边缘就会停下类，浮动的元素之后影响它后面的普通文档流元素（对前面不造成影响）</li></ul></li></ol><h3 id="浮动技巧"><a href="#浮动技巧" class="headerlink" title="浮动技巧"></a>浮动技巧</h3><ol><li><p>浮动和普通文档流父盒子搭配使用：</p><p>先用普通文档流的父盒子排列好上下位置，里面的小盒子咱门再采用浮动进行左右排列</p></li><li><p>一浮全浮：一个元素浮动了，它的兄弟元素都要浮动</p></li></ol><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><p>问题：浮动造成父级盒子塌陷的问题</p><p>解决方法：</p><ul><li><p>给父级加高度</p></li><li><p>给父级添加overflow: hidden;</p></li><li><p>隔墙法，用clear清除浮动造成的影响</p></li><li><p>通过伪元素清除浮动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 给浮动元素的父元素添加.clearfix类名</span><br><span class="line">.clearfix:after &#123;</span><br><span class="line">content:&quot;&quot;;</span><br><span class="line">font-size:0;</span><br><span class="line">display:block;</span><br><span class="line">visibility:hidden;</span><br><span class="line">clear:both;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix&#123;</span><br><span class="line">*zoom:1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="浮动的拓展"><a href="#浮动的拓展" class="headerlink" title="浮动的拓展"></a>浮动的拓展</h3><p>浮动的初心：</p><p>最早发明浮动的时候，就是为了实现图片的环绕排列，浮动的元素，层级会高于普通文档流的，但是它不会压住文字，文字会进行环绕性排列</p><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h3 id="为什么会有定位，它的应用场景有哪些"><a href="#为什么会有定位，它的应用场景有哪些" class="headerlink" title="为什么会有定位，它的应用场景有哪些?"></a>为什么会有定位，它的应用场景有哪些?</h3><p>​定位的元素，可以随心所欲的移动位置，但不会影响其它元素，这些是普通文档流、浮动所没有的，常用的场景，比如: banner图、快速导航…</p><p>目的：不论哪种定位，都是为了让某个元素摆放到设计的位置。</p><h3 id="定位的组成"><a href="#定位的组成" class="headerlink" title="定位的组成"></a>定位的组成</h3><p>定位的方式 + 具体的方向值</p><h3 id="定位的分类"><a href="#定位的分类" class="headerlink" title="定位的分类"></a>定位的分类</h3><ul><li>静态定位：position：static；（默认情况下就是此种）</li><li>相对定位：position：relative;</li><li>决定定位：position：absolute;</li><li>固定定位：position：fixed;</li><li>粘性定位：sticky</li></ul><h4 id="定位的方向值"><a href="#定位的方向值" class="headerlink" title="定位的方向值"></a>定位的方向值</h4><ul><li>left：距离参照物左边的距离</li><li>right：距离参照物右边的距离</li><li>top：距离参照物顶边的距离</li><li>bottom：距离参照物底边的距离</li><li>以上的值可以是正数、负数、0</li></ul><h4 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h4><ul><li>参照物是自身，参照自己原来的位置进行的移动</li><li>另一个比较重要的作用：给绝对定位做参照物</li></ul><h5 id="相对定位的特点："><a href="#相对定位的特点：" class="headerlink" title="相对定位的特点："></a>相对定位的特点：</h5><p>没有脱离普通的文档流，位置还在。</p><h4 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h4><ul><li>参照物是其它元素（祖先元素），绝对定位关于参照物的规则</li><li>只要是祖先级儿素，并且里面有绝对定位或固定定位或相对定位就满足了参照物条什</li><li>如果多个祖先级都满足条件，按照“就近原则”，谁离那个元素最近，谁就是参照物</li><li>如果祖先级元素都没设置参照物条件，那参照物就是body</li></ul><h5 id="绝对定位的特点"><a href="#绝对定位的特点" class="headerlink" title="绝对定位的特点"></a>绝对定位的特点</h5><ul><li>绝对定位的元素，脱离了普通文档流，不再占位，层级高于普通文档流的层级</li><li>绝对定位的元素，即使是行内元素，写宽、高也可以起作用</li><li>绝对定位的元素，如果是块级元素，不写宽度，就是自身内容大小</li></ul><h4 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h4><p>固定定位主要参照浏览器窗口的。</p><p>不论滚动条怎么滚动，设置固定定位的元素位置始终相对于浏览器窗口是不动的。</p><p>经常用来做固定导航</p><h4 id="粘性定位"><a href="#粘性定位" class="headerlink" title="粘性定位"></a>粘性定位</h4><p>position：sticky是css定位新增属性。可以说是相对定位relative和固定定位fixed的结合，它主要用在对scroll事件的监听上。简单来说，在滑动过程中，某个元素距离其父元素的距离达到sticky粘性定位的要求时(比如top：100px)。position:sticky这时的效果相当于fixed定位，固定到适当位置.。</p><p>目前兼容性不是很好</p><h3 id="层级：z-index"><a href="#层级：z-index" class="headerlink" title="层级：z-index"></a>层级：z-index</h3><p>只有定位元素才有z-index这个属性，默认是auto，z-index这个值可以是0、正数、负数，值越大，层级越高</p><h3 id="盒子水平垂直居中"><a href="#盒子水平垂直居中" class="headerlink" title="盒子水平垂直居中"></a>盒子水平垂直居中</h3><p>让一个元素在屏幕中或者是一个盒子中水平垂直居中的公式 (知道此元素的一个大小，但是不知道大盒子或者屏幕的宽度或者高度)</p><ol><li>定位：根据情况选择是绝对定位还是固定定位</li><li>水平居中：left：50%；margin-left的值是负的盒子宽度的一半</li><li>垂直居中：top：50%；margin-top的值是负的盒子高度的一半</li></ol>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/16/hello-world/"/>
      <url>/2022/10/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
